function [y1] = myNeuralNetworkFunctionH(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 25-Apr-2025 22:45:26.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx3 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [248;1;100];
x1_step1.gain = [0.0032;0.133333333333333;0.00222222222222222];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.8582034442647223926;-6.7124852930407676865;0.20986814145537083243;-2.2817987725437705038;1.1156463527309250505;-0.75333971853788894713;-2.1871620419306792016;-0.94351620106071043548];
IW1_1 = [-1.4730034811288215124 0.5768290474461017503 -3.8323054071253963571;0.080912629164875904397 -5.755773464709005971 -0.082167936622203771591;-2.9876839040042941775 0.11713311428318938512 0.46418554614305301831;-0.15210205640284860107 1.9051427616733358494 -0.23759045306773338146;1.8728310872398303832 -2.4550310088897373539 -1.1095803185568242633;-0.94260761511188351225 0.03826730882509799675 -0.45864325925162835462;-1.4590558025747701887 2.8575200271394551876 -0.7217387538241124556;-1.3980174587312397261 0.026325666987997608376 -0.27986218825726483228];

% Layer 2
b2 = -0.28103468444923607183;
LW2_1 = [-0.062405259060784784575 -0.41316087119979544307 0.44806512098154649415 0.20093193708288895061 -0.0068574518103971934466 -0.8095731316926390031 -0.039793730313855538161 1.1371343535125906232];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.228222157381772;
y1_step1.xoffset = 40.94886;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end

