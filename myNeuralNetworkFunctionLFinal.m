function [y1] = myNeuralNetworkFunctionL(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 25-Apr-2025 22:33:01.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx3 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [248;1;100];
x1_step1.gain = [0.0032;0.133333333333333;0.00222222222222222];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.82922424346672785056;0.84203010733532690502;17.588217897986087479;2.4476604014638270179;1.6185809244038871224;0.3723654927901997036;-2.1891122473698185757;2.197941413029756319];
IW1_1 = [2.5812907912947471445 -0.074493352803746082369 -0.65817996142847079444;1.6156228073495051412 -0.67544250468626354511 0.040156440111154337314;-28.061564202231828347 9.5073938395422672443 -0.53866808897840356973;3.7419237295731240245 0.20856165769487319817 0.045455803893978873054;2.4665037029309027083 0.36844979863884241844 0.0055282825214797298718;2.060276939501701321 -0.071184565004921887543 -0.33580811482266298418;-0.37012576146262815557 -0.0079060416430148106048 -0.91542588600184759962;2.9702270237434293954 2.7624303779915662105 -0.61371718190627144729];

% Layer 2
b2 = -1.3872500361184054718;
LW2_1 = [0.83883228497692896575 0.14982009830774667414 0.0015336226002363108518 -0.59940398193177180097 0.61254809181645086813 -1.8489457616946896046 -1.3675519216203642081 -0.052767048411370018335];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0163925035743526;
y1_step1.xoffset = 0.9930112;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end

